#!/usr/bin/env python3
"""
Advanced Performance Improvements for VPS
Bu script sistem performansƒ±nƒ± en √ºst seviyeye √ßƒ±karmak i√ßin geli≈ümi≈ü optimizasyonlar i√ßerir
"""

import os
import sqlite3
from datetime import datetime

def optimize_sqlite_database():
    """SQLite database'i performans i√ßin optimize et"""
    db_path = 'instance/isg.db'
    
    if not os.path.exists(db_path):
        print("‚ùå Database dosyasƒ± bulunamadƒ±!")
        return
    
    print("üîß SQLite database optimizasyonu ba≈ülƒ±yor...")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # WAL mode aktive et (Write-Ahead Logging)
        cursor.execute("PRAGMA journal_mode = WAL;")
        print("‚úÖ WAL mode aktif")
        
        # Synchronous mode'u optimize et
        cursor.execute("PRAGMA synchronous = NORMAL;")
        print("‚úÖ Synchronous mode optimized")
        
        # Cache size'ƒ± artƒ±r (64MB)
        cursor.execute("PRAGMA cache_size = -64000;")
        print("‚úÖ Cache size increased to 64MB")
        
        # Temp store'u memory'de tut
        cursor.execute("PRAGMA temp_store = MEMORY;")
        print("‚úÖ Temp store set to memory")
        
        # Auto vacuum aktive et
        cursor.execute("PRAGMA auto_vacuum = INCREMENTAL;")
        print("‚úÖ Auto vacuum enabled")
        
        # Analyze komutu ile statistics g√ºncelle
        cursor.execute("ANALYZE;")
        print("‚úÖ Database statistics updated")
        
        # VACUUM ile database'i optimize et
        print("üîÑ Running VACUUM (this may take a while)...")
        cursor.execute("VACUUM;")
        print("‚úÖ Database vacuumed")
        
        conn.commit()
        conn.close()
        
        print("üéâ SQLite optimization completed!")
        
    except Exception as e:
        print(f"‚ùå Optimization error: {e}")

def create_optimized_indexes():
    """Performance i√ßin optimize edilmi≈ü indexler olu≈ütur"""
    db_path = 'instance/isg.db'
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üìä Creating optimized indexes...")
        
        # Progress tablosu i√ßin composite index
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_progress_user_video 
            ON progress(user_id, video_id);
        """)
        
        # Progress tablosu i√ßin completed index
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_progress_completed 
            ON progress(completed, completed_at);
        """)
        
        # User tablosu i√ßin email index
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_user_email 
            ON user(email);
        """)
        
        # Course tablosu i√ßin category index
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_course_category 
            ON course(category_id);
        """)
        
        # Video tablosu i√ßin course+order index
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_video_course_order 
            ON video(course_id, "order");
        """)
        
        # PDF tablosu i√ßin course+order index
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_pdf_course_order 
            ON pdf(course_id, "order");
        """)
        
        # PdfProgress tablosu i√ßin user+pdf index
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_pdf_progress_user_pdf 
            ON pdf_progress(user_id, pdf_id);
        """)
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Optimized indexes created!")
        
    except Exception as e:
        print(f"‚ùå Index creation error: {e}")

def cleanup_upload_folder():
    """Upload klas√∂r√ºn√º temizle ve optimize et"""
    upload_folder = 'static/uploads'
    
    if not os.path.exists(upload_folder):
        print("‚ùå Upload folder bulunamadƒ±!")
        return
    
    print("üßπ Upload folder cleanup ba≈ülƒ±yor...")
    
    total_size = 0
    file_count = 0
    
    # T√ºm dosyalarƒ± tara
    for root, dirs, files in os.walk(upload_folder):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                file_size = os.path.getsize(file_path)
                total_size += file_size
                file_count += 1
            except:
                pass
    
    total_size_mb = total_size / (1024 * 1024)
    
    print(f"üìä Upload folder stats:")
    print(f"   üìÅ Total files: {file_count}")
    print(f"   üíæ Total size: {total_size_mb:.1f}MB")
    
    # 1GB √ºzerindeyse uyarƒ± ver
    if total_size_mb > 1024:
        print("‚ö†Ô∏è  Upload folder √ßok b√ºy√ºk! Temizlik yapƒ±lmasƒ± √∂nerilir.")
    else:
        print("‚úÖ Upload folder boyutu normal")

def optimize_system_performance():
    """Sistem performansƒ±nƒ± genel olarak optimize et"""
    print("üöÄ System Performance Optimization")
    print("=" * 50)
    
    # SQLite optimizasyonu
    optimize_sqlite_database()
    print()
    
    # Index optimizasyonu
    create_optimized_indexes()
    print()
    
    # Upload folder temizliƒüi
    cleanup_upload_folder()
    print()
    
    print("üéâ All optimizations completed!")
    print("\nüìã √ñneriler:")
    print("1. Flask uygulamasƒ±nƒ± restart edin")
    print("2. Browser cache'ini temizleyin") 
    print("3. B√ºy√ºk dosyalar i√ßin sƒ±kƒ±≈ütƒ±rma kullanƒ±n")
    print("4. D√ºzenli olarak bu optimizasyonu √ßalƒ±≈ütƒ±rƒ±n")

def monitor_performance():
    """Performance metrikleri g√∂ster"""
    print("üìä Performance Monitoring")
    print("=" * 30)
    
    # Database boyutu
    db_path = 'instance/isg.db'
    if os.path.exists(db_path):
        db_size = os.path.getsize(db_path) / (1024 * 1024)
        print(f"üíæ Database size: {db_size:.1f}MB")
    
    # Upload folder boyutu
    upload_folder = 'static/uploads'
    if os.path.exists(upload_folder):
        total_size = 0
        for root, dirs, files in os.walk(upload_folder):
            for file in files:
                try:
                    total_size += os.path.getsize(os.path.join(root, file))
                except:
                    pass
        upload_size = total_size / (1024 * 1024)
        print(f"üìÅ Upload folder size: {upload_size:.1f}MB")
    
    # Memory usage (requires psutil)
    try:
        import psutil
        memory = psutil.virtual_memory()
        print(f"üíª System memory: {memory.percent}% used")
        print(f"üíø Disk usage: {psutil.disk_usage('/').percent}%")
    except ImportError:
        print("‚ö†Ô∏è  psutil not installed - install for detailed monitoring")

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'optimize':
            optimize_system_performance()
        elif command == 'monitor':
            monitor_performance()
        elif command == 'database':
            optimize_sqlite_database()
        elif command == 'indexes':
            create_optimized_indexes()
        elif command == 'cleanup':
            cleanup_upload_folder()
        else:
            print("‚ùå Unknown command")
    else:
        print("üéØ Performance Improvements Tool")
        print("\nKullanƒ±m:")
        print("  python performance_improvements.py optimize    # T√ºm optimizasyonlarƒ± yap")
        print("  python performance_improvements.py monitor     # Performance'ƒ± izle")
        print("  python performance_improvements.py database    # Sadece database'i optimize et")
        print("  python performance_improvements.py indexes     # Sadece indexleri olu≈ütur")
        print("  python performance_improvements.py cleanup     # Upload folder'ƒ± temizle") 